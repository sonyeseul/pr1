/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-07-18 10:51:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Problem2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write(" <head>\r\n");
      out.write("  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("  <title>calendar</title>\r\n");
      out.write(" </head>\r\n");
      out.write(" <body>\r\n");
      out.write("  ");

  java.util.Calendar cal=java.util.Calendar.getInstance(); 
  int currentYear=cal.get(java.util.Calendar.YEAR); 
  int currentMonth=cal.get(java.util.Calendar.MONTH);
  int currentDate=cal.get(java.util.Calendar.DATE);
  String Year=request.getParameter("year"); 
  String Month=request.getParameter("month");
  int year, month;
  
  if(Year == null && Month == null){ 
	  year=currentYear;
	  month=currentMonth;
	  }
	  else { 
	   year=Integer.parseInt(Year);
	   month=Integer.parseInt(Month);
	   if(month<0) { month=11; year=year-1; } 
	   if(month>11) { month=0; year=year+1; }
	  }
  
      out.write("\r\n");
      out.write("  <center>\r\n");
      out.write("  <table border=0> \r\n");
      out.write("   <tr>\r\n");
      out.write("    <td align=left width=200> \r\n");
      out.write("    <a href=\"calendar.jsp?year=");
out.print(year-1);
      out.write("&month=");
out.print(month);
      out.write("\">◀</a>\r\n");
      out.write("    ");
 out.print(year); 
      out.write("년\r\n");
      out.write("    <a href=\"calendar.jsp?year=");
out.print(year+1);
      out.write("&month=");
out.print(month);
      out.write("\">▶</a>\r\n");
      out.write("  </td>\r\n");
      out.write("    <td align=center width=300>\r\n");
      out.write("    <a href=\"calendar.jsp?year=");
out.print(year);
      out.write("&month=");
out.print(month-1);
      out.write("\">◀</a>\r\n");
      out.write("    ");
 out.print(month+1); 
      out.write("월\r\n");
      out.write("    <a href=\"calendar.jsp?year=");
out.print(year);
      out.write("&month=");
out.print(month+1);
      out.write("\">▶</a>\r\n");
      out.write("    </td>\r\n");
      out.write("    <td align=right width=200>");
 out.print(currentYear + "-" + (currentMonth+1) + "-" + currentDate); 
      out.write("</td>\r\n");
      out.write("   </tr>\r\n");
      out.write("  </table>\r\n");
      out.write("  <table border=1 cellspacing=0>\r\n");
      out.write("   <tr>\r\n");
      out.write("    <td width=100>일</td> \r\n");
      out.write("    <td width=100>월</td> \r\n");
      out.write("    <td width=100>화</td>\r\n");
      out.write("    <td width=100>수</td> \r\n");
      out.write("    <td width=100>목</td> \r\n");
      out.write("    <td width=100>금</td> \r\n");
      out.write("    <td width=100>토</td> \r\n");
      out.write("   </tr>\r\n");
      out.write("   <tr height=30>\r\n");
      out.write("   ");

   cal.set(year, month, 1); 
   int startDay=cal.get(java.util.Calendar.DAY_OF_WEEK); 
   int end=cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
   int br=0; 
   for(int i=0; i<(startDay-1); i++) { 
    out.println("<td>&nbsp;</td>");
    br++;
    if((br%7)==0) {
     out.println("<br>");
    }
   }
   for(int i=1; i<=end; i++) {
    out.println("<td>" + i + "</td>");
    br++;
    if((br%7)==0 && i!=end) {
     out.println("</tr><tr height=30>");
    }
   }
   while((br++)%7!=0) 
    out.println("<td>&nbsp;</td>");
   
      out.write("\r\n");
      out.write("   </tr>\r\n");
      out.write("  </table>\r\n");
      out.write("  </center>\r\n");
      out.write("<a href=\"../main.html\">메인으로 가기</a>\r\n");
      out.write(" </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
